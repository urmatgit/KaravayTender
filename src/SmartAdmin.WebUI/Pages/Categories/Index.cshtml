@page
@using CleanArchitecture.Razor.Domain.Enums
@using CleanArchitecture.Razor.Application.Constants.Permission
@model SmartAdmin.WebUI.Pages.Categories.IndexModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<IndexModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Categories"].Value;
    ViewData["PageName"] = "categories_index";
    ViewData["Category1"] = _localizer["Categories"].Value;
    ViewData["Heading"] = _localizer["Categories"].Value;
    ViewData["PageDescription"] = _localizer["Managing category parameters"].Value;
    ViewData["PreemptiveClass"] = "Default";
    var _canCreate = await _authorizationService.AuthorizeAsync(User, null, Permissions.Categories.Create);
    var _canEdit = await _authorizationService.AuthorizeAsync(User, null, Permissions.Categories.Edit);
    var _canDelete = await _authorizationService.AuthorizeAsync(User, null, Permissions.Categories.Delete);
    var _canSearch = await _authorizationService.AuthorizeAsync(User, null, Permissions.Categories.Search);
    
    var _canExport = await _authorizationService.AuthorizeAsync(User, null, Permissions.Categories.Export);

}
@section HeadBlock {

    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css">
    <link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
    <link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
    <link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
    <style>

        .category_dg_datagrid-cell-c1-_action {
            overflow: visible !important
        }
    </style>
}
<div id="js-page-content-demopanels" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["Categories"]
            <small>@_localizer["See all available options"]</small>
        </h4>
        <div class="ml-auto">
            @if (_canCreate.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="addbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
                    @_localizer["Add"]
                </button>
            }
            @if (_canDelete.Succeeded)
            {
                <button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
                    @_localizer["Delete"]
                </button>
            }
            @if (_canSearch.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="searchbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-search mr-1"></span>
                    @_localizer["Search"]
                </button>
            }
            @*@if (_canImport.Succeeded)
                {
                <div class="btn-group" role="group">
                    <button id="importbutton" type="button" class="btn btn-sm  btn-outline-primary waves-effect waves-themed">
                        <span class="@(Settings.Theme.IconPrefix) fa-upload mr-1"></span>   @_localizer["Import Excel"]
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="importbutton">
                        <button id="gettemplatebutton" class="dropdown-item">@_localizer["Download Template"]</button>
                    </div>
                </div>
                }*@
            @if (_canExport.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="exportbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
                    @_localizer["Export Excel"]
                </button>
            }
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <partial name="Table" />
            </div>
        </div>
    </div>
</div>
<partial name="AddOrEdit" />
@await Component.InvokeAsync("ImportExcel", new
{
    importUri = Url.Page("/Categories/Index") + "?handler=Import",
getTemplateUri = @Url.Page("/Categories/Index") + "?handler=CreateTemplate",
onImportedSucceeded = "reloadData()"
})
@section ScriptsBlock {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_EasyUIScriptsPartial" />
    @*<script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
    <script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>*@

    <script>jQuery.fn.tooltip = bootstrapTooltip;</script>
    <script src="~/lib/axios/dist/axios.js"></script>
    <script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>

    <script type="text/javascript">
	$('#searchbutton').click(function () {
		reloadData();
	});
	$('#addbutton').click(function () {
		popupmodal(null);
	});
	$('#deletebutton').click(function () {
		onDeleteChecked();
	});
	$('#exportbutton').click(function () {
		onExport();
	});
	$('#importbutton').click(function () {
		showImportModal();
	});
	$('#gettemplatebutton').click(function () {
		onGetTemplate();
	});
	$('#category_form :submit').click(function (e) {
		const form = document.querySelector('#category_form');
		if ($(form).valid() === false) {
			form.classList.add('was-validated');
		} else {
			const request = $('#category_form').serialize();
			axios.post('@Url.Page("/Categories/Index")', request).then(res => {
				toastr["info"]('@_localizer["Save Success."]');
				$('#category_modal').modal('toggle');
				reloadData();
			}).catch((error) => {
				if (error.response.data.Errors) {
					const errors = error.response.data.Errors;
					errors.forEach(item => {
						toastr["error"](item);
					});
				} else {
					toastr["error"](`@_localizer["Save fail"],${error.response.data}`);
				}
			});
		}
		event.preventDefault();
		event.stopPropagation();
	})
	var $dg={};
	var initdatagrid = () => {
		$dg = $('#category_dg').datagrid({
			height: (window.innerHeight-320),
			method: 'GET',
			rownumbers: false,
			singleSelect: true,
			selectOnCheck: false,
			checkOnSelect: false,
			pagination: true,
			clientPaging: false,
			remoteFilter: true,
			sortName: 'Id',
			sortOrder:'desc',
			pageSize: 15,
			pageList: [10, 15, 30, 50, 100, 1000],
			onBeforeLoad: function () {
				$('#deletebutton').prop('disabled', true);
			},
			onCheckAll: function (rows) {
				const checked = $(this).datagrid('getChecked').length > 0;
				$('#deletebutton').prop('disabled', !checked);
			},
			onUncheckAll: function () {
				$('#deletebutton').prop('disabled', true);
			},
			onCheck: function () {
				$('#deletebutton').prop('disabled', false);
			},
			onUncheck: function () {
				const checked = $(this).datagrid('getChecked').length > 0;
				$('#deletebutton').prop('disabled', !checked);
			},
			columns: [[
				{ field: 'ck', checkbox: true },
				{
					field: '_action',
					title: '@_localizer["Command"]',
					width: 100,
					align: 'center',
					formatter: function (value, row, index) {
						return `<div class="btn-group" role="group">
								  <button id="commandbtngroup" type="button" @(_canEdit.Succeeded? "":"disabled")  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
									<i class="@(Settings.Theme.IconPrefix) fa-edit"></i>
								 </button>
								 <div class="dropdown-menu dropdown-menu-animated" aria-labelledby="commandbtngroup">
								   <button class="dropdown-item" onclick="onEdit(${index})" @(_canEdit.Succeeded? "":"disabled")><i class="fal fa-edit mr-1"></i> @_localizer["Edit"]</button>
								   <button class="dropdown-item" onclick="onDelete('${row.Id}')" @(_canDelete.Succeeded? "":"disabled") ><i class="fal fa-trash-alt mr-1"></i> @_localizer["Delete"]</button>
								 </div>
							  </div>`;
					}
				},
				{ field: 'Name', title: '@_localizer["Name"]', sortable: true, width: 180 },
                { field: 'DirectionName', title: '@_localizer["Direction"]', sortable: true, width: 180 },
                { field: 'Description', title: '@_localizer["Description"]', sortable: true, width: 180 }

			]]
		})
			.datagrid('enableFilter',
				[
					{
						field: 'DirectionName',
						type: 'combobox',
						options: {

							panelHeight: 'auto',
                            data://[{ value: '', text: 'Все' }, { value: '1', text:'Первый'},{value:'2',text:'Второй'}]
								[
								{
									value: null,
									text:'@_localizer["All"]'
								},
								
								@foreach (var val in Model.Directions)
								{
									<text>
									{
										value: '@val.Value',
                                        text:'@Html.Raw(val.Text)'
									},
								    </text>
								}
								]
							,
							onChange: function (newValue, oldValue) {
									
                                    $dg.datagrid('addFilterRule', {
                                        field: 'DirectionId',
                                        op: 'equal',
                                        value: newValue
                                    });
                                
							//	$dg.datagrid('doFilter');
								
                                
                            }
						}


					}
				]
			)
			.datagrid('load', '@Url.Page("/Categories/Index")?handler=Data');

	}

	var reloadData = () => {
		$dg.datagrid('load', '@Url.Page("/Categories/Index")?handler=Data');
	}

	$(() => {
		initdatagrid();
	})
	var popupmodal = (category) => {
		$('#category_modal').modal('toggle');
		$('#category_modal .modal-title').html('@_localizer["Add Category"]');
		$('#category_form').clearForm();
		$('#category_form')[0].reset();
		if (category) {
			$('#category_modal .modal-title').html('@_localizer["Edit Category"]');
			$('#category_form').jsonToForm(category, {
				PartnerType: function (value) {
					if (value == 'TP') {
						$('#category_form [name*="PartnerType"]').val(0);
					} else {
						$('#category_form [name*="PartnerType"]').val(1);
					}
				}
			})
		} else {
			$('#category_form #Input_Id').val(0)

		}
	}

	var onEdit = (index) => {
		var category = $dg.datagrid('getRows')[index];
		popupmodal(category);
	}
	var onDelete = (id) => {
		bootbox.confirm({
			message: "@_localizer["Are you sure delete a row?"]",
			buttons: {
				confirm: {
					label: '@_localizer["Yes"]',
					className: 'btn-success'
				},
				cancel: {
					label: '@_localizer["No"]',
					className: 'btn-danger'
				}
			},
			callback: function (result) {
				if (result) {
					axios.get('@Url.Page("/Categories/Index")?handler=Delete&id=' + id).then(res => {
						toastr["info"]('@_localizer["Delete Success"]');
						reloadData();
					})
						.catch((error) => {
							if (error.response.data.Errors) {
								const errors = error.response.data.Errors;
								errors.forEach(item => {
									toastr["error"](item);
								});
							} else {
								toastr["error"](`@_localizer["Delete fail"],${error.response.data}`);
							}
						});
				}
			}
		})
	}
	var onDeleteChecked = () => {
		var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
		if (checkedId.length > 0) {
			bootbox.confirm({
				message: "@_localizer["Are you sure delete checked rows?"]",
				buttons: {
					confirm: {
						label: '@_localizer["Yes"]',
						className: 'btn-success'
					},
					cancel: {
						label: '@_localizer["No"]',
						className: 'btn-danger'
					}
				},
				callback: function (result) {
					if (result) {
						var paras = new URLSearchParams(checkedId.map(s => ['id', s]));
						console.log(paras.toString())
						axios.get('@Url.Page("/Categories/Index")?handler=DeleteChecked&' + paras.toString()).then(res => {
							toastr["info"](`@_localizer["Delete ${checkedId.length} Success"]`);
							reloadData();
						})
							.catch((error) => {
								if (error.response.data.Errors) {
									const errors = error.response.data.Errors;
									errors.forEach(item => {
										toastr["error"](item);
									});
								} else {
									toastr["error"](`@_localizer["Delete fail"],${error.response.data}`);
								}
							});
					}
				}
			});

		}
	}
	var onExport = () => {
		var options = $dg.datagrid('options');
		var data = {
			filterRules: JSON.stringify(options.filterRules),
			sort: options.sortName,
			order: options.sortOrder,
		}
		console.log(options,data)
		var headers = {
			"RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
		}
		axios.post('@Url.Page("/Categories/Index")?handler=Export',
			data,
			{
				headers: headers,
				responseType: "blob"
			})
			.then(response => {
				const filename = getFileName(response.headers['content-disposition']);
				const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
				const link = document.createElement('a');
				link.href = url;
				link.setAttribute('download', filename);
				document.body.appendChild(link);
				link.click();
			}).catch(error => {
				if (error.response.data.Errors) {
					const errors = error.response.data.Errors;
					errors.forEach(item => {
						toastr["error"](item);
					});
				} else {
					toastr["error"](`@_localizer["Export fail"],${error.response.data}`);
				}
			})


	}


    </script>
}
