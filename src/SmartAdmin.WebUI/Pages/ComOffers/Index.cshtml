@page
@using CleanArchitecture.Razor.Domain.Enums
@using  CleanArchitecture.Razor.Application.Common.Extensions
@using CleanArchitecture.Razor.Application.Constants.Permission
@model SmartAdmin.WebUI.Pages.ComOffers.IndexModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<IndexModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Сommercial offer"].Value;
    ViewData["PageName"] = "comoffers_index";
    ViewData["Category1"] = _localizer["References"].Value;
    ViewData["Heading"] = _localizer["Сommercial offer"].Value;
    ViewData["PageDescription"] = _localizer["Managing supplier referral parameters"].Value;
    ViewData["PreemptiveClass"] = "Default";
    var _canCreate = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Create);
    var _canStart = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Start);

    var _canEdit = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Edit);
    var _canDelete = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Delete);
    var _canSearch = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Search);

    var _canExport = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Export);

}
@section HeadBlock {

    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css">
    <link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
    <link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
    <link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
    <style>

        .main_dg_datagrid-cell-c1-_action {
            overflow: visible !important
        }

        .composition_dg_datagrid-cell-c2-_action {
            overflow: visible !important
        }
    </style>
}
<div id="js-page-content-demopanels" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["ComOffers"]
            <small>@_localizer["See all available options"]</small>
        </h4>
        <div class="ml-auto">
            @if (_canStart.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="startbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-bolt mr-1"></span>
                    @_localizer["Start"]
                </button>
            }

            @if (_canCreate.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="addbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
                    @_localizer["Add"]
                </button>
            }
            @if (_canDelete.Succeeded)
            {
                <button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
                    @_localizer["Delete"]
                </button>
            }
            @if (_canSearch.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="searchbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-search mr-1"></span>
                    @_localizer["Search"]
                </button>
            }
            @*@if (_canImport.Succeeded)
                {
                <div class="btn-group" role="group">
                    <button id="importbutton" type="button" class="btn btn-sm  btn-outline-primary waves-effect waves-themed">
                        <span class="@(Settings.Theme.IconPrefix) fa-upload mr-1"></span>   @_localizer["Import Excel"]
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="importbutton">
                        <button id="gettemplatebutton" class="dropdown-item">@_localizer["Download Template"]</button>
                    </div>
                </div>
                }*@
            @if (_canExport.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="exportbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
                    @_localizer["Export Excel"]
                </button>
            }
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <table id="main_dg">
                </table>
            </div>
        </div>
    </div>
</div>
<partial name="AddOrEdit" />
@await Component.InvokeAsync("ImportExcel", new
{
    importUri = Url.Page("/ComOffers/Index") + "?handler=Import",
getTemplateUri = @Url.Page("/ComOffers/Index") + "?handler=CreateTemplate",
onImportedSucceeded = "reloadData()"
})
@section ScriptsBlock {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_EasyUIScriptsPartial" />
    @*<script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
        <script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
        <script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>*@

    <script>jQuery.fn.tooltip = bootstrapTooltip;</script>
    <script src="~/lib/axios/dist/axios.js"></script>
    <script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>
    <script src="~/js/formplugins/select2/select2.bundle.js"></script>

    <script src="~/js/TableBase.js"></script>
    <script src="~/js/TableBaseClass.js"></script>
    <script type="text/javascript">
        var clscomposition = null;
        var pagelink = '@Url.Page("/ComOffers/Index")';
        var translations = {
            SaveSuccess: '@_localizer["Save Success."]',
            SaveFail: '@_localizer["Save fail"]',
            IconPrefix: '@(Settings.Theme.IconPrefix)',
            Command: '@_localizer["Command"]',
            Edit: '@_localizer["Edit"]',
            Delete: '@_localizer["Delete"]',
            AddCaption: '@_localizer["Add commercial offer"]',
            EditCaption: '@_localizer["Edit commercial offer"]',
            DeleteRowDialog: '@_localizer["Are you sure delete a row?"]',
			Yes: '@_localizer["Yes"]',
			No: '@_localizer["No"]',
            DeleteSuccess: '@_localizer["Delete Success"]',
            DeleteFail: '@_localizer["Delete fail"]',
			DeleteRowsDialog: '@_localizer["Are you sure delete checked rows?"]',
            Success: '@_localizer["Success"]',
            ExportFail: '@_localizer["Export fail"]',
            Name: '@_localizer["Name"]',
		}
		var _canEdit = @(_canEdit.Succeeded ? "true":"false" );
        var _canDelete =  @(_canDelete.Succeeded ? "true" : "false" );

        var YesNotList = [
            {
                id: '',
                text: 'Все'

            },
            {
                id: 'true',
                text: 'Да'
            },
            {
                id: 'false',
                text: 'Нет'
            }

        ]
        var jsonToFormCallBack = {

            IsDeliveryInPrice: function (value) {
                if (value == true) {
                    $('#edit_form [name*="IsDeliveryInPrice"]').prop('checked', true);
                } else {
                    $('#edit_form [name*="IsDeliveryInPrice"]').prop('checked', false);
                }
            },
            IsBankDays: function (value) {
                if (value == true) {
                    $('#edit_form [name*="IsBankDays"]').prop('checked', true);
                } else {
                    $('#edit_form [name*="IsBankDays"]').prop('checked', false);
                }
            },
        }
        document.addEventListener("rowCheck", function (event) { // (1)
            console.log(event.detail.check);
            $('#startbutton').prop('disabled', event.detail.check);
        });

        $('#startbutton').click(function () {
            alert("Start");
        });
        $('#edit_modal').on('shown.bs.modal', function () {

            clscomposition.ResizeGrid();
        });
        $('#InputPos_NomenclatureId').change(function(){
            var nomenId = $(this).val();
            console.log(id);
            axios.get('/Nomenclatures/Index?handler=ById&id=' + nomenId)
                .then(res => {
                    console.log(res);
                    $('#InputPos_Nomenclature_Category_Name').val(res.Category.Name);


                })
                .catch((error) => {
                    if (error.response.data.Errors) {
                        const errors = error.response.data.Errors;
                        errors.forEach(item => {
                            toastr["error"](item);
                        });
                    } else {
                        toastr["error"](`${windows.translations.GetCategoriesFail},${error.response.data}`);
                    }
                });
        })
		$(() => {

            tblColumns = [
                { field: 'StatusStr', title: '@_localizer["Status"]', sortable: true, width: 130 },
                { field: 'Number', title: '@_localizer["Number"]', sortable: true, width: 100 },

                { field: 'DateBegin', title: '@_localizer["Date open"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'DateEnd', title: '@_localizer["Date close"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'DirectionName', title: '@_localizer["Direction"]', sortable: true, width: 150 },
                { field: 'TermBegin', title: '@_localizer["Term from"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'TermEnd', title: '@_localizer["Term to"]', sortable: true, width: 130, formatter: dateformatter  },

                { field: 'ManagerName', title: '@_localizer["Manager"]', sortable: true, width: 150 },
                { field: 'WinnerName', title: '@_localizer["Winner"]', sortable: true, width: 150 },
                { field: 'Name', title: '@_localizer["Name"]', sortable: true, width: 180 },
                { field: 'DelayDay', title: '@_localizer["Delay day"]', sortable: true, width: 100 },
                { field: 'IsBankDaysStr', title: '@_localizer["Bank days"]', sortable: true, width: 80, formatter: checkboxformatter },
                { field: 'IsDeliveryInPriceStr', title: '@_localizer["Price include delivery"]', sortable: true, width: 80, formatter: checkboxformatter }

            ];
            tblFilters = [

                {
                    field: 'IsBankDaysStr',
                    type: 'combobox',
                    options: {
                        panelHeight: 'auto',
                        valueField: 'id',
                        textField: 'text',
                        data: YesNotList,
                        onChange: function (newValue, oldValue) {
                            console.log(newValue);
                            $dg.datagrid('addFilterRule', {
                                field: 'IsBankDays',
                                op: 'equal',
                                value: newValue
                            });

                        }

                    }

                },
                {
                    field: 'IsDeliveryInPriceStr',
                    type: 'combobox',
                    options: {
                        panelHeight: 'auto',
                        valueField: 'id',
                        textField: 'text',
                        data: YesNotList,
                        onChange: function (newValue, oldValue) {
                            console.log(newValue);
                            $dg.datagrid('addFilterRule', {
                                field: 'IsDeliveryInPrice',
                                op: 'equal',
                                value: newValue
                            });

                        }

                    }

                },
                {
                    field: 'StatusStr',
                    type: 'combobox',
                    options: {
                        panelHeight: 'auto',
                        data: [{
                            value: null,
                            text:'Все'
                        },
                            @foreach(var val in Enum.GetValues(typeof(CleanArchitecture.Razor.Domain.Enums.ComOfferStatus)))
                {
                    <text>
                            {
                                value: '@val',
                                text: '@Html.Raw((((CleanArchitecture.Razor.Domain.Enums.ComOfferStatus)val).ToDescriptionString()))'
                            },
                            </text>
                }
                        ],
                        onChange: function (newValue, oldValue) {
                            console.log('Sttus change ' + newValue);
                            $dg.datagrid('addFilterRule', {
                                field: 'Status',
                                op: 'equal',
                                value: newValue
                            });
                        }
                    }

                }
            ]
            initdatagrid();
             clscomposition = new clsBaseTable("composition",'@Url.Page("/ComPositions/Index")');
            clscomposition.tblColumns= [
                { field: 'StatusStr', title: '@_localizer["Status"]', sortable: true, width: 130 },
                { field: 'Number', title: '@_localizer["Number"]', sortable: true, width: 100 },

                { field: 'DateBegin', title: '@_localizer["Date open"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'DateEnd', title: '@_localizer["Date close"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'DirectionName', title: '@_localizer["Direction"]', sortable: true, width: 150 },
                { field: 'TermBegin', title: '@_localizer["Term from"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'TermEnd', title: '@_localizer["Term to"]', sortable: true, width: 130, formatter: dateformatter  },

                { field: 'ManagerName', title: '@_localizer["Manager"]', sortable: true, width: 150 },
                { field: 'WinnerName', title: '@_localizer["Winner"]', sortable: true, width: 150 },
                { field: 'Name', title: '@_localizer["Name"]', sortable: true, width: 180 },
                { field: 'DelayDay', title: '@_localizer["Delay day"]', sortable: true, width: 100 },
                { field: 'IsBankDaysStr', title: '@_localizer["Bank days"]', sortable: true, width: 80, formatter: checkboxformatter },
                { field: 'IsDeliveryInPriceStr', title: '@_localizer["Price include delivery"]', sortable: true, width: 80, formatter: checkboxformatter }

            ];
            clscomposition.Init();
             $('.select2').select2({
                placeholder: '@Html.Raw(@_localizer["Choose areas"])',

                allowClear: true,
                 dropdownParent: $('#compostion_edit_form')
            });
            //$('.summernote').summernote({
            //    focus: true,
            //    height: (window.innerHeight / 2),
            //    toolbar: [
            //        ['style', ['bold', 'italic', 'underline', 'clear']],
            //        ['fontsize', ['fontsize']],
            //        ['color', ['color']],
            //        ['para', ['ul', 'ol', 'paragraph']],
            //        ["view", ["fullscreen", "codeview"]]
            //    ]
            //});
        })
        function TogleFullScreen() {

            if ($('#edit_modal').hasClass("modal-fullscreen")) {
                $('#edit_modal').removeClass("modal-fullscreen");
            } else
                $('#edit_modal').addClass("modal-fullscreen");
        }
    </script>
}
