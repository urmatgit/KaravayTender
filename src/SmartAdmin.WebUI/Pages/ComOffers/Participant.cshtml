@page
@using CleanArchitecture.Razor.Domain.Enums
@using  CleanArchitecture.Razor.Application.Common.Extensions
@using CleanArchitecture.Razor.Application.Constants.Permission
@model SmartAdmin.WebUI.Pages.ComOffers.ParticipantModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<SmartAdmin.WebUI.Pages.ComOffers.IndexModel> _localizer
@inject Microsoft.Extensions.Localization.IStringLocalizer<SmartAdmin.WebUI.Pages.Contragents.IndexModel> _localizerContr
@inject Microsoft.Extensions.Localization.IStringLocalizer<SmartAdmin.WebUI.Pages.ComParticipants.IndexModel> _localizerPart
@inject Microsoft.Extensions.Localization.IStringLocalizer<SmartAdmin.WebUI.Pages.ComStages.IndexModel> _localizerStage
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
    ViewData["Title"] = _localizer["Сommercial offer"].Value;
    ViewData["PageName"] = "comoffers_participant";
    ViewData["Category1"] = _localizer["References"].Value;
    ViewData["Heading"] = _localizer["Сommercial offer"].Value;
    ViewData["PageDescription"] = _localizer["Managing supplier referral parameters"].Value;
    ViewData["PreemptiveClass"] = "Default";
    var _canCreate = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Create);
    var _canStart = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Start);

    var _canEdit = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Edit);
    var _canDelete = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Delete);
    var _canSearch = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Search);

    var _canExport = await _authorizationService.AuthorizeAsync(User, null, Permissions.ComOffers.Export);

}
@section HeadBlock {

    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css">
    <link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
    <link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
    <link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
    <link rel="stylesheet" media="screen, print" href="~/css/formplugins/select2/select2.bundle.css">
    <style>

        .main_dg_datagrid-cell-c1-_action {
            overflow: visible !important
        }

        .composition_dg_datagrid-cell-c2-_action {
            overflow: visible !important
        }
    </style>
}
<div id="table-page-content" class="card mb-g">
    <div class="card-header bg-white d-flex align-items-center">
        <h4 class="m-0">
            @_localizer["Commercial offer"]
            <small>@_localizer["See all available options"]</small>
        </h4>
        <div class="ml-auto">
            @if (_canSearch.Succeeded)
            {
                <button class="btn btn-sm btn-outline-primary " id="searchbutton">
                    <span class="@(Settings.Theme.IconPrefix) fa-search mr-1"></span>
                    @_localizer["Search"]
                </button>
            }

        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <table id="main_dg">
                </table>
            </div>
        </div>
    </div>
</div>

<partial name="AddOrEdit" />


@section ScriptsBlock {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_EasyUIScriptsPartial" />
    @*<script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
        <script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
        <script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>*@
    <script type="text/javascript" src="~/lib/easyui/plugins/datagrid-detailview.js"></script>
    <script>jQuery.fn.tooltip = bootstrapTooltip;</script>
    <script src="~/lib/axios/dist/axios.js"></script>
    <script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>
    <script src="~/js/formplugins/select2/select2.bundle.js"></script>


    <script type="text/javascript">
        let clscomposition = null;
        var currentEditRow = "";

        var pagelink = '@Url.Page("/ComOffers/Participant")';
        var translations = {
            SaveSuccess: '@_localizer["Save Success."]',
            SaveFail: '@_localizer["Save fail"]',
            IconPrefix: '@(Settings.Theme.IconPrefix)',
            Command: '@_localizer["Command"]',
            Edit: '@_localizer["Edit"]',
            Delete: '@_localizer["Delete"]',
            AddCaption: '@_localizer["Add commercial offer"]',
            EditCaption: '@_localizer["Edit commercial offer"]',
            DeleteRowDialog: '@_localizer["Are you sure delete a row?"]',
			Yes: '@_localizer["Yes"]',
			No: '@_localizer["No"]',
            DeleteSuccess: '@_localizer["Delete Success"]',
            DeleteFail: '@_localizer["Delete fail"]',
			DeleteRowsDialog: '@_localizer["Are you sure delete checked rows?"]',
            Success: '@_localizer["Success"]',
            ExportFail: '@_localizer["Export fail"]',
            Name: '@_localizer["Name"]',

             Status: '@_localizerContr["Status"]',
            FullName: '@_localizerContr["Full name"]',
            INN: '@_localizerContr["INN"]',
            Direction: '@_localizerContr["Direction"]',
            Service: '@_localizerContr["Service"]',
            KPP: '@_localizerContr["KPP"]',
            Manager: '@_localizerContr["Manager"]',
            Phone: '@_localizerContr["Phone"]',
            ContactPerson: '@_localizerContr["Contact person"]',
            ContactPhone: '@_localizerContr["Contact person phone"]',
            LoadFail: '@_localizerPart["load fail"]',

            Participant: '@_localizerPart["Participant"]',
            StepFailure: '@_localizerPart["Step failure"]',
            NoParticipantsSel: '@_localizerPart["No participants selected"]',
            AddSuccess: '@_localizerPart["Participants  is added"]',
            AddFail: '@_localizerPart["Adding fail"]',
            AddParticipants: '@_localizerPart["Add participant"]',
            Cancel: '@_localizer["Cancel"]',
            Ok: '@_localizer["Ok"]'

		}
		var _canEdit = @(_canEdit.Succeeded ? "true":"false" );
        var _canDelete =  @(_canDelete.Succeeded ? "true" : "false" );

        var YesNotList = [
            {
                id: '',
                text: 'Все'

            },
            {
                id: 'true',
                text: 'Да'
            },
            {
                id: 'false',
                text: 'Нет'
            }

        ]
         var ContragentStatuses=[
                                 {
                                     value: null,
                                     text: 'Все'
                                 },
								@foreach (var val in Enum.GetValues(typeof(CleanArchitecture.Razor.Domain.Enums.ContragentStatus)))
                                {
                                    <text>
                                 {
                                     value: '@val',
                                     text: '@Html.Raw((((CleanArchitecture.Razor.Domain.Enums.ContragentStatus)val).ToDescriptionString()))'
                                 },

                                    </text>

                                }
        ]
        var ParticipantStatus = [{
                    value: null,
                    text: 'Все'
                },
                            @foreach(var val in Enum.GetValues(typeof (CleanArchitecture.Razor.Domain.Enums.ParticipantStatus)))
    {
        <text>
            {
                value: '@val',
            text: '@Html.Raw((((CleanArchitecture.Razor.Domain.Enums.ParticipantStatus)val).ToDescriptionString()))'
                            },
        </text>
    }]


        $("input[name=GetStageType]:radio").change(function () {
            reloadDataCP();
        });





        function createColumnsComOffer() {

            var InitColumns =
                [

                    { field: 'ck', checkbox: true },
                    {
                        field: '_action',
                        title: `${window.translations.Command} `,
                        width: 100,
                        align: 'center',
                        formatter: function (value, row, index) {
                            return `<div class="btn-group" role="group">
								  <button id="commandbtngroup" type="button" onclick="onEdit(${index})"  @(_canEdit.Succeeded ? "" : "disabled")  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
									<i class="${window.translations.IconPrefix} fa-edit"></i>
								 </button>

							  </div>`;
                        }
                    },
                    { field: 'StatusStr', title: '@_localizer["Status"]', sortable: true, width: 130 },
                { field: 'Name', title: '@_localizer["Name"]', sortable: true, width: 180 },
                { field: 'Number', title: '@_localizer["Number"]', sortable: true, width: 100 },

                { field: 'DateBegin', title: '@_localizer["Date open"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'DateEnd', title: '@_localizer["Date close"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'DirectionName', title: '@_localizer["Direction"]', sortable: true, width: 150 },
                { field: 'TermBegin', title: '@_localizer["Term from"]', sortable: true, width: 130, formatter: dateformatter  },
                { field: 'TermEnd', title: '@_localizer["Term to"]', sortable: true, width: 130, formatter: dateformatter  },

                { field: 'ManagerName', title: '@_localizer["Manager"]', sortable: true, width: 150 },


                { field: 'DelayDay', title: '@_localizer["Delay day"]', sortable: true, width: 100 },
                { field: 'IsBankDaysStr', title: '@_localizer["Bank days"]', sortable: true, width: 80, formatter: checkboxformatter },
                { field: 'IsDeliveryInPriceStr', title: '@_localizer["Price include delivery"]', sortable: true, width: 80, formatter: checkboxformatter }



                ];

            return InitColumns;
        };
        let   tblFilters = [

                {
                    field: 'IsBankDaysStr',
                    type: 'combobox',
                    options: {
                        panelHeight: 'auto',
                        valueField: 'id',
                        textField: 'text',
                        data: YesNotList,
                        onChange: function (newValue, oldValue) {
                            console.log(newValue);
                            $dg.datagrid('addFilterRule', {
                                field: 'IsBankDays',
                                op: 'equal',
                                value: newValue
                            });

                        }

                    }

                },
                {
                    field: 'IsDeliveryInPriceStr',
                    type: 'combobox',
                    options: {
                        panelHeight: 'auto',
                        valueField: 'id',
                        textField: 'text',
                        data: YesNotList,
                        onChange: function (newValue, oldValue) {
                            console.log(newValue);
                            $dg.datagrid('addFilterRule', {
                                field: 'IsDeliveryInPrice',
                                op: 'equal',
                                value: newValue
                            });

                        }

                    }

                },
                {
                    field: 'StatusStr',
                    type: 'combobox',
                    options: {
                        panelHeight: 'auto',
                        data: [{
                            value: null,
                            text:'Все'
                        },
                            @foreach(var val in Enum.GetValues(typeof(CleanArchitecture.Razor.Domain.Enums.ComOfferStatus)))
                {
                    <text>
                            {
                                value: '@val',
                                text: '@Html.Raw((((CleanArchitecture.Razor.Domain.Enums.ComOfferStatus)val).ToDescriptionString()))'
                            },
                            </text>
                }
                        ],
                        onChange: function (newValue, oldValue) {
                            console.log('Sttus change ' + newValue);
                            $dg.datagrid('addFilterRule', {
                                field: 'Status',
                                op: 'equal',
                                value: newValue
                            });
                        }
                    }

                }
        ]
       let  tblColumnsComPosition = [
                {
                    field: 'Category', title: '@_localizer["Category"]', sortable: true, width: 130, formatter: function (val, rec) {
                        return rec.Category == null ? "" : rec.Category.Name;
                    }
                },
                {
                    field: 'Nomenclature.Name', title: '@_localizer["Nomenclature"]', sortable: true, width: 150 , formatter: function (val, rec) {
                        return rec.Nomenclature.Name;
                    }
                },
                {
                    field: 'Stage', title: '@_localizerStage["Stage"]', sortable: true, width: 80
                },

                {
                    field: 'AriaNames', title: '@_localizer["Arias"]', sortable: true, width: 150, formatter: function (val, rec) {
                        return rec.AreaNames;
                    }
                },
                {
                    field: 'Nomenclature.UnitOf.Name', title: '@_localizer["UnitOf"]', sortable: true, width: 80, formatter: function (val, rec) {
                        return rec.Nomenclature.UnitOf.Name;
                    }
                },
                { field: 'DeliveryCount', title: '@_localizer["Delivery count"]', sortable: true, width: 130},

                { field: 'Price', title: '@_localizer["Price"]', sortable: true, width: 80 },

                { field: 'Nomenclature.Vat.Stavka', title: '@_localizer["VAT,%"]', sortable: true, width: 80 },
                { field: 'Volume', title: '@_localizer["Volume"]', sortable: true, width: 80 },
                { field: 'QualityDocsNames', title: '@_localizer["Quality documents"]', sortable: true, width: 150 },
                { field: 'NomSpecification', title: '@_localizer["Specification"]', sortable: true, width: 150},
                { field: 'Summa', title: '@_localizer["Summa"]', sortable: true, width: 80 }

            ];

        var $dgCP = {};
        var initdatagridCP = () => {
            $dgCP = $('#compostion_dg').datagrid({
                height: (window.innerHeight /2),
                method: 'GET',
                rownumbers: true,
                singleSelect: true,
                selectOnCheck: false,
                checkOnSelect: false,
                pagination: true,
                clientPaging: false,
                remoteFilter: true,

                sortName: 'Nomenclature.Name',
                sortOrder: 'asc',
                pageSize: 5,
                pageList: [5, 10, 30, 50, 100, 1000],

                columns: [tblColumnsComPosition],
                onLoadError: function (error) {
                    if (error.responseJSON.Errors) {
                        const errors = error.responseJSON.Errors;
					errors.forEach(item => {
						toastr["error"](item);
					});
				} else {
                        toastr["error"](`@_localizer["Load fail"],${error.responseJSON}`);
				}
                }
            }).datagrid('enableFilter', {});


        }
        function reloadDataCP() {
            let StageType = $('input[name="GetStageType"]:checked').val();
            $('#compostion_dg').datagrid('load', "/ComOffers/Participant?handler=DataPos&ComOfferId=" + currentEditRow.Id + "&IsLastStage=" + StageType);
        }
        $('#participant_modal').on('shown.bs.modal', function () {
            reloadDataCP();

            $dgCP.datagrid('resize');

                })
        var $dg = {};

        var initdatagrid = () => {
            $dg = $('#main_dg').datagrid({
                height: (window.innerHeight - 320),
                method: 'GET',
                rownumbers: false,
                singleSelect: true,
                selectOnCheck: false,
                checkOnSelect: false,
                pagination: true,
                clientPaging: false,
                remoteFilter: true,
                sortName: 'Id',
                sortOrder: 'desc',
                pageSize: 15,
                pageList: [10, 15, 30, 50, 100, 1000],
                onBeforeLoad: function () {

                },
                onCheckAll: function (rows) {
                    const checked = $(this).datagrid('getChecked').length > 0;


                },
                onUncheckAll: function () {

                },
                onCheck: function () {


                },
                onUncheck: function () {
                    const checked = $(this).datagrid('getChecked').length > 0;

                },
                columns: [createColumnsComOffer()]
                ,
                view: detailview,
                detailFormatter: function (index, row) {
                    return '<div style="padding:2px"><table class="ddv"></table></div>';
                },
                onExpandRow: function (index, row) {
                    var ddv = $(this).datagrid('getRowDetail', index).find('table.ddv');
                    ddv.datagrid({

                        method: 'GET',
                        rownumbers: true,
                        singleSelect: true,
                        selectOnCheck: false,
                        checkOnSelect: false,
                        pagination: true,
                        clientPaging: false,
                        remoteFilter: true,

                        sortName: 'Nomenclature.Name',
                        sortOrder: 'asc',
                        pageSize: 5,
                        pageList: [5, 10, 30, 50, 100, 1000],

                        columns: [tblColumnsComPosition],


                        //,
                        //onResize: function () {
                        //    $('#product_dg').datagrid('fixDetailRowheight', index);
                        //    }

                        onLoadSuccess: function () {
                            setTimeout(function () {
                                $('#main_dg').datagrid('fixDetailRowHeight', index);
                            }, 0);
                        }
                    }).datagrid('enableFilter', {})
                        .datagrid('load', "/ComOffers/Participant?handler=DataPos&ComOfferId=" + row.Id);
                    $('#main_dg').datagrid('fixDetailRowHeight', index);
                }
            })

                .datagrid('enableFilter', tblFilters)
                .datagrid('load', `/ComOffers/Participant?handler=Data`);

        }


		$(() => {


            initdatagrid();
            initdatagridCP();
            })

        var reloadData = () => {
		$dg.datagrid('load', '@Url.Page("/ComOffers/Participant")?handler=Data');
        }
        $('#participant_form :submit').click(function (e) {
		const form = document.querySelector('#participant_form');
		if ($(form).valid() === false) {
			form.classList.add('was-validated');
		} else {
			const request = $('#participant_form').serialize();
			axios.post('@Url.Page("/ComOffers/Participant")', request).then(res => {
				toastr["info"]('@_localizer["Save Success."]');
				$('#participant_modal').modal('toggle');
				reloadData();
			}).catch((error) => {
				if (error.response.data.Errors) {
					const errors = error.response.data.Errors;
					errors.forEach(item => {
						toastr["error"](item);
					});
				} else {
					toastr["error"](`@_localizer["Save fail"],${error.response.data}`);
				}
			});
		}
		event.preventDefault();
		event.stopPropagation();
	})
        var popupmodal = (participant) => {
		$('#participant_modal').modal('toggle');
		$('#participant_modal .modal-title').html('@_localizer["Add Direction"]');
		$('#participant_form').clearForm();
		$('#participant_form')[0].reset();
        if (participant) {
                currentEditRow = participant;
			$('#participant_modal .modal-title').html('@_localizer["Edit Direction"]');
			$('#participant_form').jsonToForm(participant, {
                IsDeliveryInPrice: function (value) {
                    if (value == true) {
                        $('#participant_form [name*="IsDeliveryInPrice"]').prop('checked', true);
                    } else {
                        $('#participant_form [name*="IsDeliveryInPrice"]').prop('checked', false);
                    }
                },
                IsBankDays: function (value) {
                    if (value == true) {
                        $('#participant_form [name*="IsBankDays"]').prop('checked', true);
                    } else {
                        $('#participant_form [name*="IsBankDays"]').prop('checked', false);
                    }
                },
                TermBegin: function (value) {
                    var dateFormat = "YYYY-MM-DD";

                    var date = moment(value).format(dateFormat);
                    $('#participant_form [name*="TermBegin"]').val(date);
                },
                TermEnd: function (value) {
                    var dateFormat = "YYYY-MM-DD";

                    var date = moment(value).format(dateFormat);
                    $('#Input_TermEnd').val(date);
                },
                Name: function (value) {
                    $('#Input_Name').val(value);
                }

            })
            //reloadDataCP();
            //$('#compostion_dg').datagrid('resize');
		} else {
			$('#participant_form #Input_Id').val(0)

		}
	}
        var onEdit = (index) => {
            var participant = $dg.datagrid('getRows')[index];
            popupmodal(participant);
        }
        $(document).ready(function () {
            $(window).keydown(function (event) {
                if (event.keyCode == 13) {
                    event.preventDefault();
                    return false;
                }
            });
        });

    </script>
}
