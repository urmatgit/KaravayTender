@page
@using CleanArchitecture.Razor.Domain.Enums
@using CleanArchitecture.Razor.Infrastructure.Constants.Permission
@model SmartAdmin.WebUI.Pages.QualityDocs.IndexModel
@inject Microsoft.Extensions.Localization.IStringLocalizer<IndexModel> _localizer
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService
@{
	ViewData["Title"] = _localizer["Quality documents"].Value;
	ViewData["PageName"] = "qualityDocs_index";
	ViewData["Category1"] = _localizer["References"].Value;
	ViewData["Heading"] = _localizer["Quality documents"].Value;
	ViewData["PageDescription"] = _localizer["Managing supplier referral parameters"].Value;
	ViewData["PreemptiveClass"] = "Default";
	var _canCreate = await _authorizationService.AuthorizeAsync(User, null, Permissions.QualityDocs.Create);
	var _canEdit = await _authorizationService.AuthorizeAsync(User, null, Permissions.QualityDocs.Edit);
	var _canDelete = await _authorizationService.AuthorizeAsync(User, null, Permissions.QualityDocs.Delete);
	var _canSearch = await _authorizationService.AuthorizeAsync(User, null, Permissions.QualityDocs.Search);
	var _canImport = await _authorizationService.AuthorizeAsync(User, null, Permissions.QualityDocs.Import);
	var _canExport = await _authorizationService.AuthorizeAsync(User, null, Permissions.QualityDocs.Export);

}
@section HeadBlock {

	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css">
	<link rel="stylesheet" media="screen, print" href="~/css/fa-solid.css">
	<link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
	<link rel="stylesheet" media="screen,print" href="~/lib/easyui/themes/insdep/easyui.css">
	<link rel="stylesheet" media="screen, print" href="~/css/formplugins/summernote/summernote.css">
	<style>

		.qualityDoc_dg_datagrid-cell-c1-_action {
			overflow: visible !important
		}
	</style>
}
<div id="js-page-content-demopanels" class="card mb-g">
	<div class="card-header bg-white d-flex align-items-center">
		<h4 class="m-0">
			@_localizer["Quality documents"]
			<small>@_localizer["See all available options"]</small>
		</h4>
		<div class="ml-auto">
			@if (_canCreate.Succeeded)
			{
				<button class="btn btn-sm btn-outline-primary " id="addbutton">
					<span class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></span>
					@_localizer["Add"]
				</button>
			}
			@if (_canDelete.Succeeded)
			{
				<button class="btn btn-sm btn-outline-danger" disabled id="deletebutton">
					<span class="@(Settings.Theme.IconPrefix) fa-trash-alt mr-1"></span>
					@_localizer["Delete"]
				</button>
			}
			@if (_canSearch.Succeeded)
			{
				<button class="btn btn-sm btn-outline-primary " id="searchbutton">
					<span class="@(Settings.Theme.IconPrefix) fa-search mr-1"></span>
					@_localizer["Search"]
				</button>
			}
			@*@if (_canImport.Succeeded)
				{
				<div class="btn-group" role="group">
					<button id="importbutton" type="button" class="btn btn-sm  btn-outline-primary waves-effect waves-themed">
						<span class="@(Settings.Theme.IconPrefix) fa-upload mr-1"></span>   @_localizer["Import Excel"]
					</button>
					<button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
						<span class="sr-only">Toggle Dropdown</span>
					</button>
					<div class="dropdown-menu" aria-labelledby="importbutton">
						<button id="gettemplatebutton" class="dropdown-item">@_localizer["Download Template"]</button>
					</div>
				</div>
				}*@
			@if (_canExport.Succeeded)
			{
				<button class="btn btn-sm btn-outline-primary " id="exportbutton">
					<span class="@(Settings.Theme.IconPrefix) fa-download mr-1"></span>
					@_localizer["Export Excel"]
				</button>
			}
		</div>
	</div>
	<div class="card-body">
		<div class="row">
			<div class="col-md-12">
				<table id="qualityDoc_dg">
				</table>
			</div>
		</div>
	</div>
</div>
<div class="modal fade" id="qualityDoc_modal" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-lg" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Modal title</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true"><i class="@(Settings.Theme.IconPrefix) fa-times"></i></span>
				</button>
			</div>
			<form id="qualityDoc_form" class="needs-validation" novalidate="novalidate">
				<div class="modal-body">
					@Html.AntiForgeryToken()
					<input type="hidden" asp-for="Input.Id" />
					<div class="form-row">
						<div class="col-md-12">
							<label class="form-label" for="name">@_localizer["Name"] <span class="text-danger">*</span></label>
							<input type="text" asp-for="Input.Name" class="form-control" placeholder='@_localizer["Name"]' />
							<span class="invalid-feedback" asp-validation-for="Input.Name"></span>
						</div>

						<div class="col-md-12">
							<label class="form-label" for="Contents">@_localizer["Content"] </label>
							<textarea asp-for="Input.Content" class="form-control summernote" placeholder="Contents"></textarea>
							<span class="invalid-feedback" asp-validation-for="Input.Content"></span>
							 
						</div>

					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">@_localizer["Close"]</button>
					<button type="submit" class="btn btn-primary">@_localizer["Save"]</button>
				</div>
			</form>
		</div>
	</div>
</div>
@await Component.InvokeAsync("ImportExcel", new
{
	importUri = Url.Page("/QualityDocs/Index") + "?handler=Import",
getTemplateUri = @Url.Page("/QualityDocs/Index") + "?handler=CreateTemplate",
onImportedSucceeded = "reloadData()"
})
@section ScriptsBlock {
	<partial name="_ValidationScriptsPartial" />
	<partial name="_EasyUIScriptsPartial" />
	@*<script type="text/javascript" src="~/lib/easyui/jquery.easyui.min.js" asp-append-version="true"></script>
		<script type="text/javascript" src="~/lib/easyui/plugins/datagrid-filter.js" asp-append-version="true"></script>
		<script type="text/javascript" src="~/lib/easyui/jquery.easyui.component.js" asp-append-version="true"></script>*@

	<script>jQuery.fn.tooltip = bootstrapTooltip;</script>
	<script src="~/lib/axios/dist/axios.js"></script>
	<script src="~/lib/jquery-form/jquery.jsonToForm.js"></script>
	<script src="~/js/formplugins/summernote/summernote.js"></script>
	<script type="text/javascript">
	$('#searchbutton').click(function () {
		reloadData();
	});
	$('#addbutton').click(function () {
		popupmodal(null);
	});
	$('#deletebutton').click(function () {
		onDeleteChecked();
	});
	$('#exportbutton').click(function () {
		onExport();
	});
	$('#importbutton').click(function () {
		showImportModal();
	});
	$('#gettemplatebutton').click(function () {
		onGetTemplate();
	});
	$('#qualityDoc_form :submit').click(function (e) {
		const form = document.querySelector('#qualityDoc_form');
		if ($(form).valid() === false) {
			form.classList.add('was-validated');
		} else {
			const request = $('#qualityDoc_form').serialize();
			axios.post('@Url.Page("/QualityDocs/Index")', request).then(res => {
				toastr["info"]('@_localizer["Save Success."]');
				$('#qualityDoc_modal').modal('toggle');
				reloadData();
			}).catch((error) => {
				if (error.response.data.Errors) {
					const errors = error.response.data.Errors;
					errors.forEach(item => {
						toastr["error"](item);
					});
				} else {
					toastr["error"](`@_localizer["Save fail"],${error.response.data}`);
				}
			});
		}
		event.preventDefault();
		event.stopPropagation();
	})
	var $dg={};
	var initdatagrid = () => {
		$dg = $('#qualityDoc_dg').datagrid({
			height: (window.innerHeight-320),
			method: 'GET',
			rownumbers: false,
			singleSelect: true,
			selectOnCheck: false,
			checkOnSelect: false,
			pagination: true,
			clientPaging: false,
			remoteFilter: true,
			sortName: 'Id',
			sortOrder:'desc',
			pageSize: 15,
			pageList: [10, 15, 30, 50, 100, 1000],
			onBeforeLoad: function () {
				$('#deletebutton').prop('disabled', true);
			},
			onCheckAll: function (rows) {
				const checked = $(this).datagrid('getChecked').length > 0;
				$('#deletebutton').prop('disabled', !checked);
			},
			onUncheckAll: function () {
				$('#deletebutton').prop('disabled', true);
			},
			onCheck: function () {
				$('#deletebutton').prop('disabled', false);
			},
			onUncheck: function () {
				const checked = $(this).datagrid('getChecked').length > 0;
				$('#deletebutton').prop('disabled', !checked);
			},
			columns: [[
				{ field: 'ck', checkbox: true },
				{
					field: '_action',
					title: '@_localizer["Command"]',
					width: 100,
					align: 'center',
					formatter: function (value, row, index) {
						return `<div class="btn-group" role="group">
								  <button id="commandbtngroup" type="button" @(_canEdit.Succeeded? "":"disabled")  class="btn btn-outline-primary btn-sm dropdown-toggle waves-effect waves-themed" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
									<i class="@(Settings.Theme.IconPrefix) fa-edit"></i>
								 </button>
								 <div class="dropdown-menu dropdown-menu-animated" aria-labelledby="commandbtngroup">
								   <button class="dropdown-item" onclick="onEdit(${index})" @(_canEdit.Succeeded? "":"disabled")><i class="fal fa-edit mr-1"></i> @_localizer["Edit"]</button>
								   <button class="dropdown-item" onclick="onDelete('${row.Id}')" @(_canDelete.Succeeded? "":"disabled") ><i class="fal fa-trash-alt mr-1"></i> @_localizer["Delete"]</button>
								 </div>
							  </div>`;
					}
				},
				{ field: 'Name', title: '@_localizer["Name"]', sortable: true, width: 180 },

                { field: 'Content', title: '@_localizer["Content"]', sortable: true, width: 280 }

			]]
		})
			.datagrid('enableFilter', {})
			.datagrid('load', '@Url.Page("/QualityDocs/Index")?handler=Data');

	}

	var reloadData = () => {
		$dg.datagrid('load', '@Url.Page("/QualityDocs/Index")?handler=Data');
	}

	$(() => {
		initdatagrid();
        $('.summernote').summernote({
			focus: true,
            height: (window.innerHeight/2),
            toolbar: [
                ['style', ['bold', 'italic', 'underline', 'clear']],
                ['fontsize', ['fontsize']],
                ['color', ['color']],
                ['para', ['ul', 'ol', 'paragraph']],
                ["view", ["fullscreen", "codeview"]]
            ] 
		});
	})
	var popupmodal = (qualityDoc) => {
		$('#qualityDoc_modal').modal('toggle');
		$('#qualityDoc_modal .modal-title').html('@_localizer["Add Quality document"]');
		$('#qualityDoc_form').clearForm();
		$('#qualityDoc_form')[0].reset();
		if (qualityDoc) {
			$('#qualityDoc_modal .modal-title').html('@_localizer["Edit Quality document"]');
			$('#qualityDoc_form').jsonToForm(qualityDoc)
            $('.summernote').summernote('reset');
            $('.summernote').summernote('pasteHTML', qualityDoc.Content);
		} else {
			$('#qualityDoc_form #Input_Id').val(0)
            $('.summernote').summernote('reset');

		}
	}

	var onEdit = (index) => {
		var qualityDoc = $dg.datagrid('getRows')[index];
		popupmodal(qualityDoc);
	}
	var onDelete = (id) => {
		bootbox.confirm({
			message: "@_localizer["Are you sure delete a row?"]",
			buttons: {
				confirm: {
					label: '@_localizer["Yes"]',
					className: 'btn-success'
				},
				cancel: {
					label: '@_localizer["No"]',
					className: 'btn-danger'
				}
			},
			callback: function (result) {
				if (result) {
					axios.get('@Url.Page("/QualityDocs/Index")?handler=Delete&id=' + id).then(res => {
						toastr["info"]('@_localizer["Delete Success"]');
						reloadData();
					})
						.catch((error) => {
							if (error.response.data.Errors) {
								const errors = error.response.data.Errors;
								errors.forEach(item => {
									toastr["error"](item);
								});
							} else {
								toastr["error"](`@_localizer["Delete fail"],${error.response.data}`);
							}
						});
				}
			}
		})
	}
	var onDeleteChecked = () => {
		var checkedId = $dg.datagrid('getChecked').map(x => x.Id);
		if (checkedId.length > 0) {
			bootbox.confirm({
				message: "@_localizer["Are you sure delete checked rows?"]",
				buttons: {
					confirm: {
						label: '@_localizer["Yes"]',
						className: 'btn-success'
					},
					cancel: {
						label: '@_localizer["No"]',
						className: 'btn-danger'
					}
				},
				callback: function (result) {
					if (result) {
						var paras = new URLSearchParams(checkedId.map(s => ['id', s]));
						console.log(paras.toString())
						axios.get('@Url.Page("/QualityDocs/Index")?handler=DeleteChecked&' + paras.toString()).then(res => {
							toastr["info"](`@_localizer["Delete ${checkedId.length} Success"]`);
							reloadData();
						})
							.catch((error) => {
								if (error.response.data.Errors) {
									const errors = error.response.data.Errors;
									errors.forEach(item => {
										toastr["error"](item);
									});
								} else {
									toastr["error"](`@_localizer["Delete fail"],${error.response.data}`);
								}
							});
					}
				}
			});

		}
	}
	var onExport = () => {
		var options = $dg.datagrid('options');
		var data = {
			filterRules: JSON.stringify(options.filterRules),
			sort: options.sortName,
			order: options.sortOrder,
		}
		console.log(options,data)
		var headers = {
			"RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
		}
		axios.post('@Url.Page("/QualityDocs/Index")?handler=Export',
			data,
			{
				headers: headers,
				responseType: "blob"
			})
			.then(response => {
				const filename = getFileName(response.headers['content-disposition']);
				const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' }));
				const link = document.createElement('a');
				link.href = url;
				link.setAttribute('download', filename);
				document.body.appendChild(link);
				link.click();
			}).catch(error => {
				if (error.response.data.Errors) {
					const errors = error.response.data.Errors;
					errors.forEach(item => {
						toastr["error"](item);
					});
				} else {
					toastr["error"](`@_localizer["Export fail"],${error.response.data}`);
				}
			})


	}


	</script>
}
